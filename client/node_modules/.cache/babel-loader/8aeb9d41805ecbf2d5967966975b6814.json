{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\zhann\\\\Documents\\\\React\\\\e-commerce-react2\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchCollectionsAsync),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchCollectionsStart);\n\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function fetchCollectionsAsync() {\n  var collectionRef, snapshot, collectionsMap;\n  return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return console.log('Hello I am Zhanna');\n\n        case 2:\n          _context.prev = 2;\n          collectionRef = firestore.collection('collections');\n          _context.next = 6;\n          return collectionRef.get();\n\n        case 6:\n          snapshot = _context.sent;\n          _context.next = 9;\n          return call(convertCollectionsSnapshotToMap, snapshot);\n\n        case 9:\n          collectionsMap = _context.sent;\n          _context.next = 12;\n          return put(fetchCollectionsSuccess(collectionsMap));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 18;\n          return put(fetchCollectionsFailure(_context.t0.message));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 14]]);\n}\nexport function fetchCollectionsStart() {\n  return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Users\\zhann\\Documents\\React\\e-commerce-react2\\client\\src\\redux\\shop\\shop.sagas.js"],"names":["fetchCollectionsAsync","fetchCollectionsStart","takeLatest","call","put","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","console","log","collectionRef","collection","get","snapshot","collectionsMap","message","FETCH_COLLECTIONS_START"],"mappings":";;;;yBASiBA,qB;;;yBAaAC,qB;;AAtBjB,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SACIC,uBADJ,EAEIC,uBAFJ,QAGO,gBAHP;AAKA,OAAO,SAAUT,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMU,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAN;;AADG;AAAA;AAGOC,UAAAA,aAHP,GAGuBN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAHvB;AAAA;AAIkB,iBAAMD,aAAa,CAACE,GAAd,EAAN;;AAJlB;AAIOC,UAAAA,QAJP;AAAA;AAKwB,iBAAMZ,IAAI,CAACI,+BAAD,EAAkCQ,QAAlC,CAAV;;AALxB;AAKOC,UAAAA,cALP;AAAA;AAMC,iBAAMZ,GAAG,CAACI,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;;AAND;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQC,iBAAMZ,GAAG,CAACK,uBAAuB,CAAC,YAAMQ,OAAP,CAAxB,CAAT;;AARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaP,OAAO,SAAUhB,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMC,UAAU,CAACG,eAAe,CAACa,uBAAjB,EAA0ClB,qBAA1C,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects';\r\n\r\nimport ShopActionTypes from './shop.types';\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nimport {\r\n    fetchCollectionsSuccess,\r\n    fetchCollectionsFailure\r\n} from './shop.actions';\r\n\r\nexport function* fetchCollectionsAsync() {\r\n    yield console.log('Hello I am Zhanna');\r\n    try {\r\n        const collectionRef = firestore.collection('collections');\r\n        const snapshot = yield collectionRef.get();\r\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\r\n        yield put(fetchCollectionsSuccess(collectionsMap));\r\n    } catch (error) {\r\n        yield put(fetchCollectionsFailure(error.message));\r\n    }  \r\n}\r\n\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\r\n}"]},"metadata":{},"sourceType":"module"}